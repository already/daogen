##DAO实现代码生成模版
##使用到的变量有：
##$!{gb.packageName}包名，如：com.kifanle.order
##$!{gb.userName}机器登录用户名，如：microboss
##$!{gb.nowDate}当前日期，如：2013-05-02
##$!{tbb.className}类名，如：UserInfo
##$!{tbb.objectName}对象名，如：userInfo
#set($conf=$!{tbb.conf})
#set($PO = "DO")
#set($clear = "")
package $!{gb.packageName}.dao;

import java.util.List;

import javax.annotation.Resource;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
#foreach($cb in $tbb.colList)
#if($!{cb.propertyType}=="Clob"&&!$clob)
import java.sql.Clob;
#set($clob=true)
#elseif($!{cb.propertyType}=="Blob"&&!$blob)
import java.sql.Blob;
#set($blob=true)
#elseif($!{cb.propertyType}=="Date"&&!$d)
import java.util.Date;
#set($d=true)
#elseif($!{cb.propertyType}=="BigDecimal"&&!$bigDecimal)
import java.math.BigDecimal;
#set($bigDecimal=true)
#end
#end

import org.springframework.stereotype.Repository;
import com.ibatis.sqlmap.client.SqlMapClient;
import $!{gb.packageName}.pojo.$!{tbb.className}${PO};
#if($conf.isNeedPage())
import java.util.Collections;
import $!{gb.packageName}.common.Result;
import $!{gb.packageName}.query.$!{tbb.className}Query;
#end
/**
 * @author $!{gb.userName}
 * @since $!{gb.nowDate}
 */
@Repository
public class $!{tbb.className}DAO {
	
	@Resource
	SqlMapClient sqlMapClientTemplate;
	
	public Long add$!{tbb.className}${PO}($!{tbb.className}${PO} $!{tbb.objectName}) throws SQLException{
		return (Long)this.sqlMapClientTemplate.insert("${tbb.className}.insert${tbb.className}${PO}", $!{tbb.objectName});
	}
	
#if($conf.isGetByKey())
	public $!{tbb.className}${PO} get$!{tbb.className}${PO}byKey(long $!{tbb.pkcol.propertyName}) throws SQLException {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("$!{tbb.pkcol.propertyName}", $!{tbb.pkcol.propertyName});
		$!{tbb.className}$PO result = ($!{tbb.className}$PO) this.sqlMapClientTemplate.queryForObject(
				"$!{tbb.className}.get$!{tbb.className}${PO}", params);
		return result;
	}
#end
	
#if($conf.isGetByKeys())
    public List<$!{tbb.className}${PO}> get$!{tbb.className}${PO}sByKeys(List<Long> $!{tbb.pkcol.propertyName}s) throws SQLException {
		if ($!{tbb.pkcol.propertyName}s.isEmpty()) {
			return Collections.emptyList();
		}
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("keys", $!{tbb.pkcol.propertyName}s);
		return  (List<$!{tbb.className}${PO}>)this.sqlMapClientTemplate.queryForList("$!{tbb.className}.get$!{tbb.className}${PO}sByKeys", params);
	}	
#end
	
#if($conf.isDelByKey())
	public Integer deleteByKey(Long $!{tbb.pkcol.propertyName}) throws SQLException {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("key", $!{tbb.pkcol.propertyName});
		Integer row = (Integer) this.sqlMapClientTemplate.delete("$!{tbb.className}.deleteByKey", params);
		return row;
	}
#end	
	
#if($conf.isDelByKeys())
    public Integer deleteByKeys(List<Long> $!{tbb.pkcol.propertyName}s) throws SQLException {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("keys", $!{tbb.pkcol.propertyName}s);
		Integer row = (Integer) this.sqlMapClientTemplate.delete("$!{tbb.className}.deleteByKeys", params);
		return row;
	}
#end	
	
#if($conf.isUpdateObj())
    public Integer update$!{tbb.className}${PO}($!{tbb.className}${PO} $!{tbb.objectName}) throws SQLException{
		return (Integer) this.sqlMapClientTemplate.update("${tbb.className}.update${tbb.className}${PO}", $!{tbb.objectName});
	}
	
	/**
	 * 成批更新对象，需要设置对象中的keys。
	 */
    public Integer update$!{tbb.className}${PO}sByKeys($!{tbb.className}${PO} $!{tbb.objectName}) throws SQLException{
		return (Integer) sqlMapClientTemplate.update("${tbb.className}.update${tbb.className}${PO}sByKeys", $!{tbb.objectName});
	}
#end

    #if($conf.selectMap.size()>0)
	#foreach($sel in $conf.selectMap.keySet())
		#if( $conf.selectMap.get($sel) && $conf.selectMap.get($sel).size()>0)${clear}
	 public #if($sel.endsWith("List"))List<$!{tbb.className}${PO}>#{else}$!{tbb.className}${PO}#end ${sel}(#foreach($w in $conf.selectMap.get($sel))#{if}($!{tbb.colMap.get($w)})#{if}($!{velocityCount}>1),#{end}$!{tbb.colMap.get($w).propertyType} $!{tbb.colMap.get($w).colName}#{end}#{end}) throws SQLException{
		Map<String, Object> params = new HashMap<String, Object>();
#foreach($w in $conf.selectMap.get($sel))#if($!{tbb.colMap.get($w)})
		params.put("$!{tbb.colMap.get($w).colName}", $!{tbb.colMap.get($w).colName});
#end
#end
		#if($sel.endsWith("List"))List<$!{tbb.className}${PO}> result = (List<$!{tbb.className}${PO}>) this.sqlMapClientTemplate.queryForList(
				"$!{tbb.className}.${sel}", params);		
#else$!{tbb.className}${PO} result = ($!{tbb.className}${PO}) this.sqlMapClientTemplate.queryForObject("$!{tbb.className}.${sel}", params);
#end
		return result;
	}	
		#end	
	#end
	#end
	
	#if($conf.isNeedPage())
	@SuppressWarnings("unchecked")
    public Result<$!{tbb.className}${PO}> get$!{tbb.className}${PO}ListWithPage($!{tbb.className}Query $!{tbb.objectName}Query){
	    Result<$!{tbb.className}${PO}> rs = new Result<$!{tbb.className}${PO}>(); 
		try{		
			rs.setCount((Integer) this.sqlMapClientTemplate.queryForObject("$!{tbb.className}.get$!{tbb.className}ListCount",$!{tbb.objectName}Query));
			rs.setList((List<$!{tbb.className}${PO}>)this.sqlMapClientTemplate.queryForList("$!{tbb.className}.get$!{tbb.className}ListWithPage", $!{tbb.objectName}Query));
		}catch(SQLException e){
			rs.setSuccess(false);
			rs.setCount(0);
			rs.setList(Collections.EMPTY_LIST);
			rs.setErrorMsg(e.toString());
		}
		return rs;
	}
    #end

}
