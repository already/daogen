##DAO-sqlmap-mapping生成模版
##使用到的变量有：
##$!{tbb.className}类名，如：UserInfo
##$!{tbb.objectName}对象名，如：userInfo
##$!{tbb.tableName}表名，如：user_info
##$!{tbb.colList}表字段列表
##$!{tbb.pkcol}表主键字段
##$!{velocityCount}循环次数
##$!{cb.propertyName}字段属性名，如：fullName
##$!{cb.colName}字段列名，如：full_name
##$!{cb.propertyType}字段属性类型名，如：String
##$!{gb.packageName}包名，如：com.kifanle.order
#set($conf=$!{tbb.conf})
#set($PO = $!{gb.objSuffix})
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
"http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="${tbb.className}">
	<!-- Alias Map Defined -->
	<typeAlias alias="${tbb.className}Query" type="$!{gb.packageName}.query.${tbb.className}Query" />
	<typeAlias alias="${tbb.className}" type="$!{gb.packageName}.pojo.${tbb.className}${PO}" />
	<resultMap id="${tbb.objectName}" class="${tbb.className}">
#foreach($cb in $tbb.colList)
		<result property="$!cb.propertyName" column="$!cb.colName" />
#end
	</resultMap>
		
	<!-- Select SQL -->
	<sql id="${tbb.objectName}${PO}.selector">
		SELECT #foreach($cb in $tbb.colList)$!{cb.colName}#{if}($velocityCount != $tbb.colList.size()),#{end}#end
		FROM ${tbb.tableName}
	</sql>
	<sql id="${tbb.objectName}${PO}List.where">
		<dynamic>
#foreach($cb in $tbb.colList)
#if($cb.propertyType=="String"||$cb.propertyType=="Long"||$cb.propertyType=="Integer")
			<isNotNull property="$!cb.propertyName" prepend=" AND ">
				$!{cb.colName}=#$!{cb.propertyName}#
		  	</isNotNull>
#end
#end
		</dynamic>
	</sql>
	
	##处理排序问题，明天要解决
	<sql id="${tbb.objectName}${PO}List.order">
		<dynamic prepend=" ORDER BY "> 
			<isNotEmpty property="orderFields">
				<iterate property="orderFields" conjunction="," open="" close="">
					#orderFields[].fieldName# #orderFields[].order#
		        </iterate>
			</isNotEmpty>
		</dynamic>
	</sql>
	
	#if($conf.isGetByKey())
	<select id="$!{tbb.className}.get$!{tbb.className}${PO}" resultMap="${tbb.objectName}">
		<include refid="${tbb.objectName}DO.selector" />
		WHERE ${tbb.pkcol.colName}=#${tbb.pkcol.propertyName}#
	</select>
	#end
	
	#if($conf.isGetByKeys())
	<select id="$!{tbb.className}.get$!{tbb.className}${PO}sByKeys" resultMap="${tbb.objectName}">
		<include refid="${tbb.objectName}DO.selector" />
		WHERE ${tbb.pkcol.colName} in
		<iterate conjunction="," open="(" close=")" property="keys">
			#keys[]#
		</iterate>
	</select>	
	#end	
	
	#if($conf.isDelByKey())
	<delete id="$!{tbb.className}.deleteByKey">
		DELETE FROM ${tbb.tableName}
		WHERE $!{tbb.pkcol.colName} = #key#
  	</delete>
	#end	
	
	#if($conf.isDelByKeys())
	<delete id="$!{tbb.className}.deleteByKeys">
		DELETE FROM ${tbb.tableName}
		WHERE ${tbb.pkcol.colName} in
		<iterate conjunction="," open="(" close=")" property="keys">
			#keys[]#
		</iterate>
  	</delete>
	#end
	
	##定制产生select方法。
#if($conf.selectMap.size()>0)
#foreach($sel in $conf.selectMap.keySet())
#if( $conf.selectMap.get($sel) && $conf.selectMap.get($sel).size()>0)
	<select id="$!{tbb.className}.$sel" resultMap="${tbb.objectName}">
		<include refid="${tbb.objectName}${PO}.selector" /> where 1=1	
			#foreach($w in $conf.selectMap.get($sel))
				#if($!{tbb.colMap.get($w)})
                 and $w = #$!{tbb.colMap.get($w).colName}#
				#end
			#end
	</select>		
		#end	
	#end
	#end
	
	##定制产生update方法
	
	##更新对象
	#if($conf.isUpdateObj())
	<update id="${tbb.className}.update${tbb.className}${PO}sByKeys" parameterClass="${tbb.className}">
		UPDATE ${tbb.tableName} SET modified_time=now()
#foreach($cb in $tbb.colList)
#if($!{cb.colName}!=$!{tbb.pkcol.colName}&&$!{cb.colName}!="create_time"&&$!{cb.colName}!="modified_time")
		<isNotNull prepend="," property="$!{cb.propertyName}">
			$!{cb.colName} = #$!{cb.propertyName}#
      	</isNotNull>
#end
#end
		WHERE ${tbb.pkcol.colName} in
		<iterate conjunction="," open="(" close=")" property="keys">
			#keys[]#
		</iterate>
	</update>
	
	<update id="${tbb.className}.update${tbb.className}${PO}" parameterClass="${tbb.className}">
		UPDATE ${tbb.tableName} SET modified_time=now()
#foreach($cb in $tbb.colList)
#if($!{cb.colName}!=$!{tbb.pkcol.colName}&&$!{cb.colName}!="create_time"&&$!{cb.colName}!="modified_time")
		<isNotNull prepend="," property="$!{cb.propertyName}">
			$!{cb.colName} = #$!{cb.propertyName}#
      	</isNotNull>
#end
#end
		WHERE $!{tbb.pkcol.colName} = #$!{tbb.pkcol.propertyName}#
	</update>
	
	#end	
	
	##分页代码
	<select id="${tbb.className}.get${tbb.className}ListWithPage" parameterClass="${tbb.className}Query" resultMap="${tbb.objectName}">
		<include refid="${tbb.objectName}${PO}.selector" />
		WHERE 1=1
		<include refid="${tbb.objectName}${PO}List.where" />
		<include refid="${tbb.objectName}${PO}List.order" />
	  	LIMIT #startRow#,#pageSize#
	</select>

	<select id="${tbb.className}.get${tbb.className}ListCount" parameterClass="${tbb.className}Query" resultClass="int">
		SELECT count(*) FROM ${tbb.tableName}
		WHERE 1=1
		<include refid="${tbb.objectName}${PO}List.where" />
	</select>	
	
	##add代码
	<insert id="${tbb.className}.insert${tbb.className}${PO}" parameterClass="${tbb.className}">
		INSERT INTO ${tbb.tableName}(#{foreach}($cb in $tbb.colList)#{if}($!{cb.colName}!=$!{tbb.pkcol.colName}&&$!{cb.colName}!="create_time"&&$!{cb.colName}!="modified_time")$!{cb.colName},#{end}#{end}
			    #if($!{tbb.colMap.get("create_time")})create_time#end#if($!{tbb.colMap.get("modified_time")}),modified_time#end)
		VALUES(#{foreach}($cb in $tbb.colList)#{if}($!{cb.colName}!=$!{tbb.pkcol.colName}&&$!{cb.colName}!="create_time"&&$!{cb.colName}!="modified_time")#$!{cb.propertyName}#,#{end}#{end}
				#if($!{tbb.colMap.get("create_time")})now()#end#if($!{tbb.colMap.get("modified_time")}),now()#end)
		<selectKey resultClass="long" keyProperty="$!{tbb.pkcol.colName}">
           SELECT last_insert_id() AS $!{tbb.pkcol.propertyName}
		</selectKey>
	</insert>

</sqlMap>